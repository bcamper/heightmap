!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var s,r=function(t,e,i,s){return new(i||(i=Promise))((function(r,h){function n(t){try{l(s.next(t))}catch(t){h(t)}}function a(t){try{l(s.throw(t))}catch(t){h(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,a)}l((s=s.apply(t,e||[])).next())}))};class h{constructor(t,e,i,s={}){this.frame=0,this.elapsed=0,this.lastTime=0,this.fpsSampleRange=s.fpsSampleRange||200,this.startFrameTime=0,this.frameTime=0,this.pixelRatio=s.pixelRatio||1,this.width=t*this.pixelRatio,this.height=e*this.pixelRatio,this.canvas=i,this.canvas.width=this.width,this.canvas.height=this.height,this.canvas.style.width=`${t}px`,this.canvas.style.height=`${e}px`,this.origin={x:this.width/2,y:this.height/2},this.ctx=this.canvas.getContext("2d"),this.imageData=this.ctx.createImageData(this.width,this.height),this.pixels=new Uint32Array(this.imageData.data.buffer),this.background=new Uint32Array(this.pixels.length),this.background.set(this.pixels)}clearScreen(){this.pixels.set(this.background)}blitScreen(){this.ctx.putImageData(this.imageData,0,0)}advanceFrame(t){this.frame++,null!=t&&null!=this.lastTime&&(this.elapsed+=t-this.lastTime,this.frame%this.fpsSampleRange==0&&(this.elapsed=0)),this.lastTime=t}fps(){return Math.round(1e3/(this.elapsed/(this.frame%this.fpsSampleRange)))}timePerFrame(){return this.frameTime/this.frame}startFrameTimer(){this.startFrameTime=+new Date}endFrameTimer(){this.frameTime+=+new Date-this.startFrameTime}static rgba(t,e,i,s=null){return t|e<<8|i<<16|(s||255)<<24}static setRGB(t,e){return 16777215&e|t&255<<24}static setAlpha(t,e){return 16777215&t|e<<24}static loadImage(t){return r(this,void 0,void 0,(function*(){return new Promise((e,i)=>{const s=new Image;s.onload=()=>e(s),s.onerror=()=>i(),s.src=t})}))}static dataFromImage(t){if(null==t)return null;const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");return i.drawImage(t,0,0,t.width,t.height),i.getImageData(0,0,t.width,t.height)}static makePaletteForGradients(t,e){let i=null;e.forEach((function(t){(null==i||t[1]>i)&&(i=t[1])}));const s=new Uint32Array(i);return e.forEach((function(e){var i,r,h,n,a;for(r=e[0],h=e[1],n=t[e[2]],a=t[e[3]],i=r;i<r+h;i++)s[i]=(a[0]-n[0])*(i-r)/(h-r)+n[0]|(a[1]-n[1])*(i-r)/(h-r)+n[1]<<8|(a[2]-n[2])*(i-r)/(h-r)+n[2]<<16|255<<24})),s}}class n{constructor(t,e){return{x:t,y:e}}static copy(t){return null==t?null:{x:t.x,y:t.y}}static equals(t,e){return null!=t&&null!=e&&(t.x==e.x&&t.y==e.y)}static rotate(t,e){return new n(t.x*Math.cos(e*Math.PI/180)+t.y*-Math.sin(e*Math.PI/180),t.x*Math.sin(e*Math.PI/180)+t.y*Math.cos(e*Math.PI/180))}static print(t){return null==t?null:"("+t.x+", "+t.y+")"}}class a{constructor(t,e={}){if(this.line=t,this.line.start.x=Math.round(this.line.start.x),this.line.start.y=Math.round(this.line.start.y),this.line.end.x=Math.round(this.line.end.x),this.line.end.y=Math.round(this.line.end.y),this.position=n.copy(this.line.start),this.delta=new n(Math.abs(this.line.end.x-this.line.start.x),Math.abs(this.line.end.y-this.line.start.y)),this.step=new n(this.line.start.x<this.line.end.x?1:-1,this.line.start.y<this.line.end.y?1:-1),this.accumulator=this.delta.x>=this.delta.y?this.delta.x/2:this.delta.y/2,Object.keys(e).length>0){this.properties={},this.propertyDeltas={};for(const t in e)this.properties[t]=e[t][0],this.propertyDeltas[t]=e[t][1]-e[t][0],this.delta.x>=this.delta.y?this.propertyDeltas[t]/=this.delta.x:this.propertyDeltas[t]/=this.delta.y}}next(){if(null!=this.position)if(n.equals(this.position,this.line.end))this.position=null;else if(this.delta.x>=this.delta.y?(this.position.x+=this.step.x,0!=this.step.y&&(this.accumulator-=this.delta.y,this.accumulator<0&&(this.position.y+=this.step.y,this.accumulator+=this.delta.x))):(this.position.y+=this.step.y,0!=this.step.x&&(this.accumulator-=this.delta.x,this.accumulator<0&&(this.position.x+=this.step.x,this.accumulator+=this.delta.y))),null!=this.properties)for(const t in this.properties)this.properties[t]+=this.propertyDeltas[t]}}!function(t){t[t.left=0]="left",t[t.right=1]="right",t[t.both=2]="both"}(s||(s={}));class l{constructor(t,e){this.display=e,this.vertexes=t,this.vertexesTransformed=new Array(this.vertexes.length),this.position=new n(0,0),this.rotation=0,this.ymin=null,this.ymax=null,this.leftEdges=new Int16Array(this.display.height),this.rightEdges=new Int16Array(this.display.height),this.leftEdgeProperties={},this.rightEdgeProperties={},this.rowPropertyDeltas={}}traceEdges(t,e=null){if(null==t)return!1;let i,r;for(let t=0;t<this.vertexes.length;t++)this.vertexesTransformed[t]=n.rotate(this.vertexes[t],this.rotation),(null==i||this.vertexesTransformed[t].y<i.y)&&(i=this.vertexesTransformed[t],r=t);for(let i=0;i<this.vertexes.length;i++){const h=this.vertexes[(i+r)%this.vertexes.length],l=this.vertexes[(i+r+1)%this.vertexes.length],o={start:this.vertexesTransformed[(i+r)%this.vertexes.length],end:this.vertexesTransformed[(i+r+1)%this.vertexes.length]};let d;if(e){d={};for(const t of e)d[t]=[h[t],l[t]]}let u=s.right;o.end.y<o.start.y?u=s.left:o.end.y===o.start.y&&(u=s.both);const c=new a(o,d),p=new n(0,0);for(;null!=c.position;)p.x=c.position.x+this.position.x+this.display.origin.x,p.y=c.position.y+this.position.y+this.display.origin.y,t.call(this,p,c.properties,u),c.next()}return!0}rasterize(t=[],e=null){this.ymin=null,this.ymax=null;for(let t=0;t<this.display.height;t++)this.leftEdges[t]=-1,this.rightEdges[t]=-1;for(const e of t)null==this.leftEdgeProperties[e]&&(this.leftEdgeProperties[e]=new Array(this.display.height)),null==this.rightEdgeProperties[e]&&(this.rightEdgeProperties[e]=new Array(this.display.height)),null==this.rowPropertyDeltas[e]&&(this.rowPropertyDeltas[e]=new Array(this.display.height));this.traceEdges((function(t,e,i){if((null==this.ymin||t.y<this.ymin)&&(this.ymin=t.y),(null==this.ymax||t.y>this.ymax)&&(this.ymax=t.y),this.ymin<0)this.ymin=0;else if(this.ymax>=this.display.height)this.ymax=this.display.height-1;else if(i===s.left||i===s.both){const i=this.leftEdges[t.y];if(-1===i||t.x<i){this.leftEdges[t.y]=t.x;for(const i in e)this.leftEdgeProperties[i][t.y]=e[i]}}else if(i===s.right||i===s.both){const i=this.rightEdges[t.y];if(-1===i||t.x>i){this.rightEdges[t.y]=t.x;for(const i in e)this.rightEdgeProperties[i][t.y]=e[i]}}}),t);for(let e=this.ymin;e<=this.ymax;e++){const i=this.rightEdges[e]-this.leftEdges[e];for(const s of t)this.rowPropertyDeltas[s][e]=(this.rightEdgeProperties[s][e]-this.leftEdgeProperties[s][e])/i}if("function"==typeof e){const i=[];for(let s=this.ymax;s>=this.ymin;s--){let r=0;i[r++]=s,i[r++]=this.leftEdges[s],i[r++]=this.rightEdges[s];for(const e of t)i[r++]=this.leftEdgeProperties[e][s],i[r++]=this.rowPropertyDeltas[e][s];e.apply(this,i)}}}renderEdges(t){this.traceEdges(e=>{this.display.pixels[e.y*this.display.width+e.x]=t})}renderGradient(){this.rasterize(["r","g","b"],(function(t,e,i,s,r,h,n,a,l){let o=t*this.display.width+e;for(let t=e;t<i;t++,o++)this.display.pixels[o]=s+(h<<8)+(a<<16)+(255<<24),s+=r,h+=n,a+=l}))}setTexture(t){this.texture=t,this.tex32=new Uint32Array(this.texture.data.buffer)}renderTexture(){if(null!=this.texture){this.rasterize(["u","v"]),this.display.startFrameTimer();for(let t=this.ymin;t<=this.ymax;t++){let e=this.leftEdgeProperties.u[t];const i=this.rowPropertyDeltas.u[t];let s=this.leftEdgeProperties.v[t];const r=this.rowPropertyDeltas.v[t],h=this.leftEdges[t],n=this.rightEdges[t];let a=t*this.display.width+h;for(let t=h;t<n;t++)this.display.pixels[a]=this.tex32[(~~s<<8)+~~e],e+=i,s+=r,a++}this.display.endFrameTimer()}}static vertexesForNSided(t,e,i={}){const s=[],r=360/t,h=1&t?0:-r/2,a=new n(0,-e);for(let l=0;l<t;l++)s[l]=n.rotate(a,r*l+h),null!=i.texture&&(s[l].u=(s[l].x+e)/e/2*i.texture.width,s[l].v=(s[l].y+e)/e/2*i.texture.height);return s}}var o=function(t,e,i,s){return new(i||(i=Promise))((function(r,h){function n(t){try{l(s.next(t))}catch(t){h(t)}}function a(t){try{l(s.throw(t))}catch(t){h(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,a)}l((s=s.apply(t,e||[])).next())}))};const d=document.getElementById("canvas"),u=new h(560,560,d,{pixelRatio:1}),c=new class extends l{constructor(t,e){super(t,e),this.xheights=new Int16Array(this.display.width),this.xheights_empty=new Int16Array(this.display.width);for(let t=0;t<this.xheights_empty.length;t++)this.xheights_empty[t]=this.display.height}renderHeightmap(){const{width:t,height:e,pixels:i}=this.display;if(null!=this.texture){this.display.startFrameTimer(),this.rasterize(["u","v"]),this.xheights.set(this.xheights_empty);for(let s=this.ymax;s>=this.ymin;s--){let r=this.leftEdgeProperties.u[s],h=this.leftEdgeProperties.v[s];const n=this.rowPropertyDeltas.u[s],a=this.rowPropertyDeltas.v[s];let l=this.leftEdges[s],o=this.rightEdges[s];l<0&&(r+=-l*n,h+=-l*a,l=0),o>=t&&(o=t);for(let d=l;d<o;d++){const l=this.tex32[(~~h<<8)+~~r];let o=l>>>24;if(o=s-o,o<0&&(o=0),this.xheights[d]==e&&(this.xheights[d]=o),o<this.xheights[d]){let e=this.xheights[d]*t+d;for(let s=this.xheights[d];s>=o;s--)i[e]=l|255<<24,e-=t;this.xheights[d]=o}r+=n,h+=a}}this.display.endFrameTimer()}}}(l.vertexesForNSided(6,225,{texture:{width:256,height:256}}),u);c.position=new n(0,50),c.vertexes.forEach((function(t,e){t.r=256*e/c.vertexes.length+0,t.g=(e+c.vertexes.length/3)%c.vertexes.length*256/c.vertexes.length+0,t.b=(e+2*c.vertexes.length/3)%c.vertexes.length*256/c.vertexes.length+0})),o(void 0,void 0,void 0,(function*(){const t=yield h.loadImage("../heightmap.png");let e,i,s;for(c.setTexture(h.dataFromImage(t)),e=h.makePaletteForGradients({pure_blue:[0,0,255],dark_blue:[0,26,255],med_blue:[0,103,255],light_blue:[0,179,255],dark_green:[0,80,13],med_green:[64,128,0],light_green:[128,196,0],brown:[80,48,0],white:[252,252,252]},[[0,8,"pure_blue","dark_blue"],[8,24,"dark_blue","med_blue"],[24,32,"med_blue","light_blue"],[32,64,"dark_green","med_green"],[64,120,"med_green","light_green"],[120,180,"light_green","brown"],[180,210,"brown","white"],[210,256,"white","white"]]),i=0;i<c.texture.width*c.texture.height;i++)s=255&c.tex32[i],c.tex32[i]=e[s],c.tex32[i]=h.setAlpha(c.tex32[i],s/2);y()}));let p=null;document.onkeydown=function(t){37==t.keyCode?p="left":39==t.keyCode?p="right":38==t.keyCode?p="up":40==t.keyCode&&(p="down")},document.onkeyup=function(t){p=null};function y(t=+new Date){u.clearScreen(),c.renderHeightmap(),c.rotation+=.5,u.blitScreen(),u.advanceFrame(t),requestAnimationFrame(y)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,